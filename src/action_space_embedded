import numpy as np
from sklearn.manifold import MDS

S = np.load("similarity_matrix_20241230_004445.npy")
S = S/100 # Normalize to [0, 1]

def run_mds_on_large_matrix(S, n_components=2):
    """
    run MDS and return the embedded coordinates in 'n_components' dimensions.
    """
    # Convert similarity to distance
    D = 1.0 - S  # or another transform if appropriate

    mds = MDS(
        n_components=n_components,
        dissimilarity='precomputed',
        random_state=42,
        n_jobs=-1, metric=False, normalized_stress=True, n_init=1

    )

    # Fit-transform
    X_embedded = mds.fit_transform(D)
    return X_embedded

if __name__ == "__main__":
    X_20d = run_mds_on_large_matrix(S, n_components=20)
    print("Embedded shape:", X_2d.shape)
